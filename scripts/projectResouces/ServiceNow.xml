<?xml version="1.0" encoding="UTF-8"?>
<exportedData version="66" buildLabel="build_main_82123_2014.12.24_03:52:27" buildVersion="5.3.0.82123" passkey="433ad0ace394b5d35596fa4a29678ff5b8c01db0">
  <exportPath>/projects/ServiceNow</exportPath>
  <project>
    <projectName>ServiceNow</projectName>
    <description>ServiceNow Integration with Flow</description>
    <resourceName>local</resourceName>
    <tracked>1</tracked>
    <workspaceName>default</workspaceName>
    <propertySheet>
      <tracked>1</tracked>
      <property>
        <propertyName>configs</propertyName>
        <description>ServiceNow configurations</description>
        <tracked>1</tracked>
        <propertySheet>
          <tracked>1</tracked>
          <property>
            <propertyName>dev101</propertyName>
            <description>Electric Cloud demo instance - dev101 server</description>
            <tracked>1</tracked>
            <propertySheet>
              <tracked>1</tracked>
              <property>
                <propertyName>snowURL</propertyName>
                <description></description>
                <expandable>0</expandable>
                <tracked>1</tracked>
                <value>https://dev101.service-now.com</value>
              </property>
            </propertySheet>
          </property>
        </propertySheet>
      </property>
      <property>
        <propertyName>scripts</propertyName>
        <description>ServiceNow integration code</description>
        <tracked>1</tracked>
        <propertySheet>
          <tracked>1</tracked>
          <property>
            <propertyName>snowInsert</propertyName>
            <description>Adds a Service Now record</description>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>#!/opt/electriccloud/electriccommander/perl/bin/perl -w&#10;use strict;&#10;#use SOAP::Lite ( +trace =&gt; 'all', maptype =&gt; {} );&#10;use SOAP::Lite;&#10;use ElectricCommander;&#10;$| = 1;&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $ec = new ElectricCommander();&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Fetch the debug flag, the input parameters and the config information&#10;&#10;my $debug = 0;&#10;$debug = getP('/javascript getProperty("/myProject/debug")');&#10;&#10;my $snowConfig = getP('config');&#10;my $hostURL = getP('/myProject/configs/' . $snowConfig . '/snowUrl');&#10;&#10;my $insertText = getP('snowInsert');&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $xp = $ec-&gt;getFullCredential('/projects/ServiceNow/credentials/' . $snowConfig);&#10;my $user = $xp-&gt;findvalue('//userName')-&gt;value();&#10;my $pass = $xp-&gt;findvalue('//password')-&gt;value();&#10;print "User: $user\n" if ($debug);&#10;sub SOAP::Transport::HTTP::Client::get_basic_credentials {&#10;    return $user =&gt; $pass;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Create a hash to represent the record we wish to insert&#10;my %in = (&#10;    'short_description' =&gt; 'New deployment required',&#10;    'category' =&gt; 'Software',&#10;    );&#10;&#10;# Parse and add the user-provided values&#10;my @inserts = split("\n", $insertText);&#10;foreach my $i (@inserts) {&#10;    next if ($i =~ m/^\#/);&#10;    (my $f, my $v) = split('=', $i, 2);&#10;    next unless ($f);&#10;    print "Insert: \"$f\", value: \"$v\"\n" if ($debug);&#10;    $in{$f} = $v;&#10;}&#10;&#10;# Create the requested record&#10;my $soapcr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?SOAP');&#10;my $methodcr = SOAP::Data-&gt;name('insert') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;my @paramscr = ();&#10;foreach my $k (keys %in) {&#10;    print "Add: \"$k\" = \"$in{$k}\"\n" if ($debug);&#10;    push(@paramscr, SOAP::Data-&gt;name($k =&gt; $in{$k}));&#10;}&#10;my $resultcr = $soapcr-&gt;call($methodcr =&gt; @paramscr);&#10;&#10;fail_if_fault($resultcr);&#10;&#10;my %cr = ();&#10;if ($resultcr-&gt;body &amp;&amp; $resultcr-&gt;body-&gt;{'insertResponse'}) {&#10;    %cr = %{ $resultcr-&gt;body-&gt;{'insertResponse'} };&#10;}&#10;my $sys_id = $cr{'sys_id'};&#10;my $snowNumber = $cr{'number'};&#10;&#10;die "No record number returned.\n" unless ($sys_id);&#10;print "Created sys_id: \"$sys_id\"\n";&#10;&#10;my $directURL = $hostURL . '/nav_to.do?uri=change_request.do?sys_id=' . $sys_id;&#10;$ec-&gt;setProperty('/myJob/snowNumber', $snowNumber);&#10;$ec-&gt;setProperty('/myJob/snowSys_id', $sys_id);&#10;$ec-&gt;setProperty('/myJob/snowURL', $directURL);&#10;&#10;my $summary =&#10;    "&lt;html&gt;" .&#10;      "&amp;#160;&amp;#160;Number: &lt;a href=\"$directURL\"&gt;$snowNumber&lt;/a&gt;&lt;br/&gt;" .&#10;      "&amp;#160;&amp;#160;sys_id: &lt;a href=\"$directURL\"&gt;$sys_id&lt;/a&gt;" .&#10;    "&lt;/html&gt;";&#10;$ec-&gt;setProperty('/myJobStep/postSummary', $summary);&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Re-read the record so we know the changed field values&#10;&#10;my $soaprr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?displayvalue=true&amp;SOAP');&#10;my $methodrr = SOAP::Data-&gt;name('getRecords') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;my @paramsrr = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;my $resultrr = $soaprr-&gt;call($methodrr =&gt; @paramsrr);&#10;fail_if_fault($resultrr);&#10;&#10;if ($debug) {&#10;    print "\n-------------------- Updated Record --------------------\n";&#10;    my %rr = ();&#10;    if ($resultrr-&gt;body &amp;&amp; $resultrr-&gt;body-&gt;{'getRecordsResponse'}) {&#10;	%rr = %{ $resultrr-&gt;body-&gt;{'getRecordsResponse'}-&gt;{'getRecordsResult'} };&#10;	foreach my $k (sort keys %rr) {&#10;	    print " $k: \"$rr{$k}\"\n";&#10;	}&#10;    }&#10;    print "\n-------------------- -------------- --------------------\n";&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub fail_if_fault {&#10;    my ($r) = @_;&#10;    if ($r-&gt;fault) {&#10;        print 'faultcode:   ' . $r-&gt;fault-&gt;{'faultcode'}   . "\n";&#10;        print 'faultstring: ' . $r-&gt;fault-&gt;{'faultstring'} . "\n";&#10;        die $r-&gt;fault-&gt;{'detail'} . "\n";&#10;    }&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub getP {&#10;    my $pn = shift;&#10;    my $xp = $ec-&gt;getProperty($pn);&#10;    print "DEBUG: getP($pn): " . $xp-&gt;findnodes_as_string("/") . "\n" if ($debug &gt; 1);&#10;    my $v = $xp-&gt;findvalue('/responses/response/property/value')-&gt;string_value;&#10;    print "DEBUG: getP($pn) returns \"$v\"\n" if ($debug);&#10;    return $v;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;</value>
          </property>
          <property>
            <propertyName>snowUpdate</propertyName>
            <description>Queries and updates a ServiceNow CR Ticket</description>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>#!/opt/electriccloud/electriccommander/perl/bin/perl -w&#10;use strict;&#10;#use SOAP::Lite ( +trace =&gt; 'all', maptype =&gt; {} );&#10;use SOAP::Lite;&#10;use ElectricCommander;&#10;#use Data::Dumper;&#10;$| = 1;&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $ec = new ElectricCommander();&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Fetch the debug flag, the input parameters and the config information&#10;&#10;my $debug = 0;&#10;$debug = getP('/javascript getProperty("/myProject/debug")');&#10;&#10;my $snowConfig = getP('config');&#10;my $hostURL = getP('/myProject/configs/' . $snowConfig . '/snowUrl');&#10;&#10;my $snowNumber = getP('snowNumber');&#10;my $snowQuery = getP('snowQuery');&#10;my $updateText = getP('snowUpdate');&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $xp = $ec-&gt;getFullCredential('/projects/ServiceNow/credentials/' . $snowConfig);&#10;my $user = $xp-&gt;findvalue('//userName')-&gt;value();&#10;my $pass = $xp-&gt;findvalue('//password')-&gt;value();&#10;print "User: $user\n" if ($debug);&#10;sub SOAP::Transport::HTTP::Client::get_basic_credentials {&#10;    return $user =&gt; $pass;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Read the requested records&#10;&#10;#my $soapcr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?displayvalue=true&amp;SOAP');&#10;my $soapcr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?SOAP');&#10;my $methodcr = SOAP::Data-&gt;name('getRecords') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;&#10;my @paramscr = ();&#10;&#10;# If we have a ServiceNow number, use that, otherwise use the query parameters&#10;if ($snowNumber) {&#10;    push(@paramscr, SOAP::Data-&gt;name(number =&gt; $snowNumber));&#10;} else {&#10;    # Specify a window of 1 record (0 - 1), sorted by descending number&#10;    push(@paramscr, SOAP::Data-&gt;name(__first_row =&gt; '0'));&#10;    push(@paramscr, SOAP::Data-&gt;name(__last_row =&gt; '1'));&#10;    push(@paramscr, SOAP::Data-&gt;name(__order_by_desc  =&gt; 'number'));&#10;    my @queries = split("\n", $snowQuery);&#10;    foreach my $q (@queries) {&#10;        next if ($q =~ m/^\#/);&#10;        (my $f, my $v) = split('=', $q, 2);&#10;        next unless ($f);&#10;        print "Query: \"$f\", value: \"$v\"\n" if ($debug);&#10;        push(@paramscr, SOAP::Data-&gt;name($f =&gt; $v));&#10;    }&#10;}&#10;&#10;my $resultcr = $soapcr-&gt;call($methodcr =&gt; @paramscr);&#10;&#10;fail_if_fault($resultcr);&#10;&#10;print "Service Now number: \"$snowNumber\"\n" if ($snowNumber);&#10;print "Service Now query:\n$snowQuery\n" if ($snowQuery);&#10;&#10;my $sys_id;&#10;my %cr = ();&#10;if ($resultcr-&gt;body &amp;&amp; $resultcr-&gt;body-&gt;{'getRecordsResponse'}) {&#10;    %cr = %{ $resultcr-&gt;body-&gt;{'getRecordsResponse'}-&gt;{'getRecordsResult'} };&#10;    $sys_id = $cr{'sys_id'};&#10;    $snowNumber = $cr{'number'};&#10;    if ($debug &gt; 1) {&#10;        print "-- Service Now record number $snowNumber, sys_id $sys_id --\n";&#10;        foreach my $k (sort keys %cr) {&#10;	    print " $k: \"$cr{$k}\"\n";&#10;        }&#10;	print "-------------------------------------------------------------\n";&#10;    }&#10;}&#10;&#10;unless ($sys_id) {&#10;    $ec-&gt;setProperty('/myJobStep/postSummary', 'No record found.');&#10;    die "No record found.\n";&#10;}&#10;&#10;print "Selected sys_id: \"$sys_id\"\n";&#10;&#10;my $directURL = $hostURL . '/nav_to.do?uri=change_request.do?sys_id=' . $sys_id;&#10;$ec-&gt;setProperty('/myJob/snowNumber', $snowNumber);&#10;$ec-&gt;setProperty('/myJob/snowSys_id', $sys_id);&#10;$ec-&gt;setProperty('/myJob/snowURL', $directURL);&#10;my $summary =&#10;    "&lt;html&gt;" .&#10;      "&amp;#160;&amp;#160;Number: &lt;a href=\"$directURL\"&gt;$snowNumber&lt;/a&gt;&lt;br/&gt;" .&#10;      "&amp;#160;&amp;#160;sys_id: &lt;a href=\"$directURL\"&gt;$sys_id&lt;/a&gt;" .&#10;    "&lt;/html&gt;";&#10;$ec-&gt;setProperty('/myJobStep/postSummary', $summary);&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Now process any updates that might be required&#10;&#10;my $update_required = 0;&#10;my @updates = split("\n", $updateText);&#10;&#10;my @params = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;&#10;foreach my $a (@updates) {&#10;&#10;    print "Processing update line: \"$a\"\n" if ($debug);&#10;&#10;    next if ($a =~ m/^\#/);&#10;&#10;    (my $f, my $v) = split('=', $a, 2);&#10;    next unless ($f);&#10;&#10;    if ($f =~ m/^\+(.*)$/) {&#10;        $f = $1;&#10;        $v = $cr{$f} . "\n" . $v;&#10;&#10;    } elsif ($f =~ m/^\.(.*)$/) {&#10;        $f = $1;&#10;        $v = $cr{$f} . $v;&#10;&#10;    } elsif ($f =~ m/^\-(.*)$/) {&#10;        $f = $1;&#10;        $v = $v . "\n" . $cr{$f};&#10;    }&#10;&#10;    print "field update: \"$f\", new value: \"$v\"\n";&#10;&#10;    push(@params, SOAP::Data-&gt;name($f =&gt; $v));&#10;    $update_required++;&#10;&#10;}&#10;&#10;if ($update_required) {&#10;&#10;    my $soap = SOAP::Lite -&gt; proxy($hostURL . '/glide/change_request.do?SOAP');&#10;    my $method = SOAP::Data-&gt;name('update') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;    print "Updating...\n";&#10;    my $result = $soap-&gt;call($method =&gt; @params);&#10;    fail_if_fault($result);&#10;&#10;    if ($result-&gt;body &amp;&amp; $result-&gt;body-&gt;{'updateResponse'}) {&#10;        my %kH = %{ $result-&gt;body-&gt;{'updateResponse'} };&#10;        foreach my $k (keys %kH) {&#10;            print " $k: \"$kH{$k}\"\n";&#10;        }&#10;    }&#10;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Re-read the record so we know the changed field values&#10;&#10;my $soaprr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?displayvalue=true&amp;SOAP');&#10;my $methodrr = SOAP::Data-&gt;name('getRecords') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;my @paramsrr = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;my $resultrr = $soaprr-&gt;call($methodrr =&gt; @paramsrr);&#10;fail_if_fault($resultrr);&#10;&#10;if ($debug) {&#10;    print "\n-------------------- Updated Record --------------------\n";&#10;    my %rr = ();&#10;    if ($resultrr-&gt;body &amp;&amp; $resultrr-&gt;body-&gt;{'getRecordsResponse'}) {&#10;	%rr = %{ $resultrr-&gt;body-&gt;{'getRecordsResponse'}-&gt;{'getRecordsResult'} };&#10;	foreach my $k (sort keys %rr) {&#10;	    print " $k: \"$rr{$k}\"\n";&#10;	}&#10;    }&#10;    print "\n-------------------- -------------- --------------------\n";&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub fail_if_fault {&#10;    my ($r) = @_;&#10;    if ($r-&gt;fault) {&#10;        print 'faultcode:   ' . $r-&gt;fault-&gt;{'faultcode'}   . "\n";&#10;        print 'faultstring: ' . $r-&gt;fault-&gt;{'faultstring'} . "\n";&#10;        die $r-&gt;fault-&gt;{'detail'} . "\n";&#10;    }&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub getP {&#10;    my $pn = shift;&#10;    my $xp = $ec-&gt;getProperty($pn);&#10;    print "DEBUG: getP($pn): " . $xp-&gt;findnodes_as_string("/") . "\n" if ($debug &gt; 1);&#10;    my $v = $xp-&gt;findvalue('/responses/response/property/value')-&gt;string_value;&#10;    print "DEBUG: getP($pn) returns \"$v\"\n" if ($debug);&#10;    return $v;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;</value>
          </property>
          <property>
            <propertyName>snowUpdateOrig</propertyName>
            <description>Updates a ServiceNow ticket</description>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>#!/opt/electriccloud/electriccommander/perl/bin/perl -w&#10;use strict;&#10;use SOAP::Lite ( +trace =&gt; 'all', maptype =&gt; {} );&#10;#use SOAP::Lite;&#10;use ElectricCommander;&#10;$| = 1;&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $ec = new ElectricCommander();&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Fetch the debug flag, the input parameters and the config information&#10;&#10;my $debug = 0;&#10;$debug = getP('/javascript getProperty("/myProject/debug")');&#10;&#10;my $snowConfig = getP('config');&#10;my $hostURL = getP('/myProject/configs/' . $snowConfig . '/snowUrl');&#10;&#10;my $snowNumber = getP('snowNumber');&#10;my $snowQuery = getP('snowQuery');&#10;my $updateText = getP('snowUpdate');&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;my $xp = $ec-&gt;getFullCredential('/projects/ServiceNow/credentials/' . $snowConfig);&#10;my $user = $xp-&gt;findvalue('//userName')-&gt;value();&#10;my $pass = $xp-&gt;findvalue('//password')-&gt;value();&#10;print "User: $user\n" if ($debug);&#10;sub SOAP::Transport::HTTP::Client::get_basic_credentials {&#10;    return $user =&gt; $pass;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Begin by finding the sys_id for the specified CR number&#10;&#10;my $soapk = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?SOAP');&#10;my $methodk = SOAP::Data-&gt;name('getKeys') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;&#10;my @paramsk = ();&#10;push(@paramsk, SOAP::Data-&gt;name(number =&gt; $snowNumber)) if ($snowNumber);&#10;my @queries = split("\n", $snowQuery);&#10;foreach my $q (@queries) {&#10;    next if ($q =~ m/^\#/);&#10;    (my $f, my $v) = split('=', $q, 2);&#10;    next unless ($f);&#10;    print "Query: \"$f\", value: \"$v\"\n" if ($debug);&#10;    push(@paramsk, SOAP::Data-&gt;name($f =&gt; $v));&#10;}&#10;&#10;my $resultk = $soapk-&gt;call($methodk =&gt; @paramsk);&#10;&#10;fail_if_fault($resultk);&#10;&#10;my $sys_id = $resultk-&gt;result;&#10;die "No record found.\n" unless ($sys_id);&#10;print "Service Now number: \"$snowNumber\"\n" if ($snowNumber);&#10;print "Service Now query:\n$snowQuery\n" if ($snowQuery);&#10;print "Returns sys_ids: \"$sys_id\"\n";&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Read the record so we know the current field values&#10;&#10;my $soapcr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?displayvalue=true&amp;SOAP');&#10;my $methodcr = SOAP::Data-&gt;name('getRecords') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;my @paramscr = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;my $resultcr = $soapcr-&gt;call($methodcr =&gt; @paramscr);&#10;fail_if_fault($resultcr);&#10;&#10;my %cr = ();&#10;if ($debug &gt; 1) {&#10;    print "\n-------------------- Original Record --------------------\n";&#10;    if ($resultcr-&gt;body &amp;&amp; $resultcr-&gt;body-&gt;{'getRecordsResponse'}) {&#10;        %cr = %{ $resultcr-&gt;body-&gt;{'getRecordsResponse'}-&gt;{'getRecordsResult'} };&#10;        foreach my $k (sort keys %cr) {&#10;            print " $k: \"$cr{$k}\"\n";&#10;	}&#10;    }&#10;    print "-------------------- --------------- --------------------\n\n";&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Now process any updates that might be required&#10;&#10;my $update_required = 0;&#10;my @updates = split("\n", $updateText);&#10;&#10;my @params = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;&#10;foreach my $a (@updates) {&#10;&#10;    print "Processing update line: \"$a\"\n" if ($debug);&#10;&#10;    next if ($a =~ m/^\#/);&#10;&#10;    (my $f, my $v) = split('=', $a, 2);&#10;    next unless ($f);&#10;&#10;    if ($f =~ m/^\+(.*)$/) {&#10;        $f = $1;&#10;        $v = $cr{$f} . "\n" . $v;&#10;&#10;    } elsif ($f =~ m/^\.(.*)$/) {&#10;        $f = $1;&#10;        $v = $cr{$f} . $v;&#10;&#10;    } elsif ($f =~ m/^\-(.*)$/) {&#10;        $f = $1;&#10;        $v = $v . "\n" . $cr{$f};&#10;    }&#10;&#10;    print "field update: \"$f\", new value: \"$v\"\n";&#10;&#10;    push(@params, SOAP::Data-&gt;name($f =&gt; $v));&#10;    $update_required++;&#10;&#10;}&#10;&#10;if ($update_required) {&#10;&#10;    my $soap = SOAP::Lite -&gt; proxy($hostURL . '/glide/change_request.do?SOAP');&#10;    my $method = SOAP::Data-&gt;name('update') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;    print "Updating...\n";&#10;    my $result = $soap-&gt;call($method =&gt; @params);&#10;    fail_if_fault($result);&#10;&#10;    if ($result-&gt;body &amp;&amp; $result-&gt;body-&gt;{'updateResponse'}) {&#10;        my %kH = %{ $result-&gt;body-&gt;{'updateResponse'} };&#10;        foreach my $k (keys %kH) {&#10;            print " $k: \"$kH{$k}\"\n";&#10;        }&#10;    }&#10;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;# Re-read the record so we know the changed field values&#10;&#10;my $soaprr = SOAP::Lite -&gt; proxy($hostURL . '/change_request.do?displayvalue=true&amp;SOAP');&#10;my $methodrr = SOAP::Data-&gt;name('getRecords') -&gt; attr({xmlns=&gt;'http://www.service-now.com/'});&#10;my @paramsrr = ( SOAP::Data-&gt;name(sys_id =&gt; $sys_id) );&#10;my $resultrr = $soaprr-&gt;call($methodrr =&gt; @paramsrr);&#10;fail_if_fault($resultrr);&#10;&#10;if ($debug) {&#10;    print "\n-------------------- Updated Record --------------------\n";&#10;    my %rr = ();&#10;    if ($resultrr-&gt;body &amp;&amp; $resultrr-&gt;body-&gt;{'getRecordsResponse'}) {&#10;	%rr = %{ $resultrr-&gt;body-&gt;{'getRecordsResponse'}-&gt;{'getRecordsResult'} };&#10;	foreach my $k (sort keys %rr) {&#10;	    print " $k: \"$rr{$k}\"\n";&#10;	}&#10;    }&#10;    print "\n-------------------- -------------- --------------------\n";&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub fail_if_fault {&#10;    my ($r) = @_;&#10;    if ($r-&gt;fault) {&#10;        print 'faultcode:   ' . $r-&gt;fault-&gt;{'faultcode'}   . "\n";&#10;        print 'faultstring: ' . $r-&gt;fault-&gt;{'faultstring'} . "\n";&#10;        die $r-&gt;fault-&gt;{'detail'} . "\n";&#10;    }&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;&#10;sub getP {&#10;    my $pn = shift;&#10;    my $xp = $ec-&gt;getProperty($pn);&#10;    print "DEBUG: getP($pn): " . $xp-&gt;findnodes_as_string("/") . "\n" if ($debug &gt; 1);&#10;    my $v = $xp-&gt;findvalue('/responses/response/property/value')-&gt;string_value;&#10;    print "DEBUG: getP($pn) returns \"$v\"\n" if ($debug);&#10;    return $v;&#10;}&#10;&#10;# = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = # = #&#10;</value>
          </property>
        </propertySheet>
      </property>
      <property>
        <propertyName>debug</propertyName>
        <description>If set to a non-zero value, extra debugging information will be emitted to the jobStep log files.</description>
        <expandable>0</expandable>
        <tracked>1</tracked>
        <value>1</value>
      </property>
      <property>
        <propertyName>ec_tags</propertyName>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value></value>
      </property>
      <property>
        <propertyName>snowUUID</propertyName>
        <expandable>1</expandable>
        <tracked>1</tracked>
        <value></value>
      </property>
    </propertySheet>
    <credential>
      <credentialName>dev101</credentialName>
      <description>Login credentials for dev101 configuration</description>
      <password>0RktEXMZkdBnzg1sY4Ihxg==</password>
      <tracked>1</tracked>
      <userName>flow</userName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
    </credential>
    <procedure>
      <procedureName>demo-IT-createTicket</procedureName>
      <description>Utility procedure to create a CR in ServiceNow requesting a deployment</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>Establish UUID</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortJobNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-EstablishUUID</subprocedure>
        <subproject></subproject>
        <timeLimit>1</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Remove stale ticket information</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ectool --silent deleteProperty /projects/Default/demo_it_sn_ticket</command>
        <condition>$[/javascript getProperty("/projects/Default/demo_it_sn_ticket")]</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell></shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Create CR</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortProcedureNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-InsertCR</subprocedure>
        <subproject></subproject>
        <timeLimit>2</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <actualParameters>
          <tracked>1</tracked>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>dev101</value>
          </property>
          <property>
            <propertyName>snowInsert</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>short_description=Deploy version 2.0.0&#10;description=Deploy version 2.0.0 - adds required color logo (from rebranding team)&#10;comments=Deploy using [code]&lt;a href="https://$[/server/hostName]/flow"&gt;Flow&lt;/a&gt;[/code]&#10;#reason=$[/myJob/snowUUID]&#10;</value>
          </property>
        </actualParameters>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Record ticket information</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ectool --silent setProperty /projects/Default/demo_it_sn_ticket     "$[/myJob/snowNumber]"&#10;ectool --silent setProperty "/myJob/report-urls/ServiceNow Ticket"  "$[/myJob/snowURL]"</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell></shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>demo-IT-deployStart</procedureName>
      <description>Updates Service Now ticket upon deployment start</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>update ServiceNow CR</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition>$[/javascript getProperty("/projects/Default/demo_it_sn_ticket")]</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-UpdateCR</subprocedure>
        <subproject></subproject>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <actualParameters>
          <tracked>1</tracked>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>dev101</value>
          </property>
          <property>
            <propertyName>snowNumber</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>$[/projects/Default/demo_it_sn_ticket]</value>
          </property>
          <property>
            <propertyName>snowQuery</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value></value>
          </property>
          <property>
            <propertyName>snowUpdate</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value># Update the description field, the - sign means prefix the existing content with the new content&#10;-description=(Flow) - $[/timestamp] (UTC) - Deployment Automation starting...&#10;# Add a comment as well, links work in comments so put a link to flow&#10;comments=Flow [code]&lt;a href="https://$[/server/hostName]/flow"&gt;(click)&lt;/a&gt;[/code] - Deployment Automation starting...&#10;# And update the state - work in progress is good&#10;state=2&#10;</value>
          </property>
        </actualParameters>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>demo-IT-deploySuccess</procedureName>
      <description>Updates Service Now ticket upon deployment completion with success</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>update ServiceNow CR</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition>$[/javascript getProperty("/projects/Default/demo_it_sn_ticket")]</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-UpdateCR</subprocedure>
        <subproject></subproject>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <actualParameters>
          <tracked>1</tracked>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>dev101</value>
          </property>
          <property>
            <propertyName>snowNumber</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>$[/projects/Default/demo_it_sn_ticket]</value>
          </property>
          <property>
            <propertyName>snowQuery</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value></value>
          </property>
          <property>
            <propertyName>snowUpdate</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value># Update the description field, the - sign means prefix the existing content with the new content&#10;-description=(Flow) - $[/timestamp] (UTC) - Deployment Complete (Success).&#10;# Add a comment as well, links work in comments so put a link to flow&#10;comments=Flow [code]&lt;a href="https://$[/server/hostName]/flow"&gt;(click)&lt;/a&gt;[/code] - Deployment Complete (Success).&#10;# And update the state to Closed Complete&#10;state=3&#10;</value>
          </property>
        </actualParameters>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Point to closed SN ticket</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ln -sf /opt/electriccloud/electriccommander/apache/htdocs/demo/serviceNowClosed.jpg /opt/electriccloud/electriccommander/apache/htdocs/demo/serviceNow.jpg</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell></shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Close ticket</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ectool deleteProperty /projects/Default/demo_it_sn_ticket</command>
        <condition>$[/javascript getProperty("/projects/Default/demo_it_sn_ticket")]</condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell></shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>driver-EstablishUUID</procedureName>
      <description>Utility procedure to determine our UUID for ServiceNow integration</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>SetUUID</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>#!/opt/electriccloud/electriccommander/perl/bin/perl -w&#10;use strict;&#10;use ElectricCommander;&#10;$| = 1;&#10;&#10;my $summary;&#10;&#10;my $ec = new ElectricCommander();&#10;$ec-&gt;abortOnError(0);&#10;&#10;my $xp = $ec-&gt;getProperty('/myProject/snowUUID');&#10;print "DEBUG: getProperty(UUID): " . $xp-&gt;findnodes_as_string("/") . "\n";&#10;my $uuid = $xp-&gt;findvalue('/responses/response/property/propertyId')-&gt;string_value;&#10;&#10;unless ($uuid) {&#10;    $xp = $ec-&gt;createProperty('/myProject/snowUUID');&#10;    print "DEBUG: createProperty(UUID): " . $xp-&gt;findnodes_as_string("/") . "\n";&#10;    $uuid = $xp-&gt;findvalue('/responses/response/property/propertyId')-&gt;string_value;&#10;    $summary = 'new ';&#10;}&#10;&#10;$ec-&gt;setProperty('/myJob/snowUUID', $uuid);&#10;$ec-&gt;setProperty('/myJobStep/postSummary', $summary . 'snowUUID: ' . $uuid);&#10;</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>driver-InsertCR</procedureName>
      <description>Creates (inserts) a new Service Now Change Request</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <tracked>1</tracked>
          <propertySheet>
            <tracked>1</tracked>
            <property>
              <propertyName>parameters</propertyName>
              <tracked>1</tracked>
              <propertySheet>
                <tracked>1</tracked>
                <property>
                  <propertyName>CR Number</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>config</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowInsert</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowNumber</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowQuery</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowUpdate</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue>dev101</defaultValue>
        <description>Service Now configuration to use (identifies server URL and account credentials)</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>snowInsert</formalParameterName>
        <defaultValue></defaultValue>
        <description>Fields to create - one field per line, in the format &lt;fieldname&gt;=&lt;new-value&gt;</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <tracked>1</tracked>
        <type>textarea</type>
      </formalParameter>
      <step>
        <stepName>Insert</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>$[/myProject/scripts/snowInsert]</command>
        <condition></condition>
        <description></description>
        <errorHandling>abortProcedureNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit>5</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
        <attachedCredentials>
          <credentialName>dev101</credentialName>
        </attachedCredentials>
      </step>
    </procedure>
    <procedure>
      <procedureName>driver-UpdateCR</procedureName>
      <description>Update Service Now Change Request</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
        <property>
          <propertyName>ec_customEditorData</propertyName>
          <tracked>1</tracked>
          <propertySheet>
            <tracked>1</tracked>
            <property>
              <propertyName>parameters</propertyName>
              <tracked>1</tracked>
              <propertySheet>
                <tracked>1</tracked>
                <property>
                  <propertyName>CR Number</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>config</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowNumber</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowQuery</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
                <property>
                  <propertyName>snowUpdate</propertyName>
                  <tracked>1</tracked>
                  <propertySheet>
                    <tracked>1</tracked>
                    <property>
                      <propertyName>formType</propertyName>
                      <expandable>1</expandable>
                      <tracked>1</tracked>
                      <value>standard</value>
                    </property>
                  </propertySheet>
                </property>
              </propertySheet>
            </property>
          </propertySheet>
        </property>
      </propertySheet>
      <formalParameter>
        <formalParameterName>config</formalParameterName>
        <defaultValue>dev101</defaultValue>
        <description>Service Now configuration to use (identifies server URL and account credentials)</description>
        <expansionDeferred>0</expansionDeferred>
        <required>1</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>snowNumber</formalParameterName>
        <defaultValue></defaultValue>
        <description>ServiceNow Change Request number, usually something like CHG0030001</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <tracked>1</tracked>
        <type>entry</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>snowQuery</formalParameterName>
        <defaultValue></defaultValue>
        <description>list of query parameters, one per line, in format field=value</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <tracked>1</tracked>
        <type>textarea</type>
      </formalParameter>
      <formalParameter>
        <formalParameterName>snowUpdate</formalParameterName>
        <defaultValue></defaultValue>
        <description>Update rules to apply to the specified Service Now ticket - one field per line, in the format &lt;fieldname&gt;=&lt;new-value&gt;</description>
        <expansionDeferred>0</expansionDeferred>
        <required>0</required>
        <tracked>1</tracked>
        <type>textarea</type>
      </formalParameter>
      <step>
        <stepName>QueryAndUpdate</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>$[/myProject/scripts/snowUpdate]</command>
        <condition>$[/javascript (getProperty("snowQuery ") + getProperty("snowNumber")) == "" ? "false" : "true"]</condition>
        <description></description>
        <errorHandling>abortProcedureNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell>ec-perl</shell>
        <timeLimit>5</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
        <attachedCredentials>
          <credentialName>dev101</credentialName>
        </attachedCredentials>
      </step>
    </procedure>
    <procedure>
      <procedureName>utility-CreateServiceNowCR</procedureName>
      <description>Utility procedure to create a CR in ServiceNow that is associated with this particular Flow instance</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>Establish UUID</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortJobNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-EstablishUUID</subprocedure>
        <subproject></subproject>
        <timeLimit>1</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Create CR</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortJobNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-InsertCR</subprocedure>
        <subproject></subproject>
        <timeLimit>2</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <actualParameters>
          <tracked>1</tracked>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>dev101</value>
          </property>
          <property>
            <propertyName>snowInsert</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>reason=$[/myJob/snowUUID]&#10;#&#10;####location=$[/myJob/snowUUID]&#10;# Location does not work, perhaps due to length limitations&#10;#&#10;# Use description for debugging&#10;#description=$[/myJob/snowUUID]</value>
          </property>
        </actualParameters>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>utility-prepForNewInstance</procedureName>
      <description>Utility procedure to remove existing UUID in preparation for project export or VMDK creation</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>remove snowUUID</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <command>ectool --silent deleteProperty /myProject/snowUUID</command>
        <condition></condition>
        <description></description>
        <errorHandling>failProcedure</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <logFileName></logFileName>
        <parallel>0</parallel>
        <postProcessor></postProcessor>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <shell></shell>
        <timeLimit></timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workingDirectory></workingDirectory>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
    <procedure>
      <procedureName>utility-UpdateServiceNowCR</procedureName>
      <description>utility procedure to update the most recent CR in ServiceNow that is associated with this particular Flow instance</description>
      <jobNameTemplate></jobNameTemplate>
      <resourceName></resourceName>
      <timeLimit></timeLimit>
      <timeLimitUnits>minutes</timeLimitUnits>
      <tracked>1</tracked>
      <workspaceName></workspaceName>
      <propertySheet>
        <tracked>1</tracked>
      </propertySheet>
      <step>
        <stepName>Establish UUID</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortJobNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-EstablishUUID</subprocedure>
        <subproject></subproject>
        <timeLimit>1</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
      <step>
        <stepName>Update CR</stepName>
        <alwaysRun>0</alwaysRun>
        <broadcast>0</broadcast>
        <condition></condition>
        <description></description>
        <errorHandling>abortJobNow</errorHandling>
        <exclusiveMode>none</exclusiveMode>
        <parallel>0</parallel>
        <precondition></precondition>
        <releaseMode>none</releaseMode>
        <resourceName></resourceName>
        <subprocedure>driver-UpdateCR</subprocedure>
        <subproject></subproject>
        <timeLimit>2</timeLimit>
        <timeLimitUnits>minutes</timeLimitUnits>
        <tracked>1</tracked>
        <workspaceName></workspaceName>
        <actualParameters>
          <tracked>1</tracked>
          <property>
            <propertyName>config</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>dev101</value>
          </property>
          <property>
            <propertyName>snowNumber</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value></value>
          </property>
          <property>
            <propertyName>snowQuery</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>reason=$[snowUUID]</value>
          </property>
          <property>
            <propertyName>snowUpdate</propertyName>
            <expandable>1</expandable>
            <tracked>1</tracked>
            <value>comments=updated by flow job $[/myJob/jobId]&#10;+description=updated by flow</value>
          </property>
        </actualParameters>
        <propertySheet>
          <tracked>1</tracked>
        </propertySheet>
      </step>
    </procedure>
  </project>
</exportedData>
